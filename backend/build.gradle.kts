/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("org.springframework.boot") version "3.5.0"
    id("io.spring.dependency-management") version "1.1.4"
    java
    id("com.diffplug.spotless") version "6.25.0"
    jacoco
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    implementation(libs.org.springframework.boot.spring.boot.starter.web)
    implementation(libs.org.springframework.boot.spring.boot.starter.thymeleaf)
    implementation(libs.org.springframework.boot.spring.boot.starter.data.jpa)
    implementation(libs.org.postgresql.postgresql)
    implementation(libs.org.flywaydb.flyway.core)
    implementation(libs.org.flywaydb.flyway.database.postgresql)
    implementation(libs.org.springframework.boot.spring.boot.starter.jdbc)
    implementation(libs.org.springframework.boot.spring.boot.starter.validation)
    implementation(libs.org.springframework.boot.spring.boot.starter.quartz)
    implementation(libs.org.springframework.boot.spring.boot.starter.mail)
    implementation(libs.org.springframework.boot.spring.boot.starter.actuator)
    implementation(libs.io.micrometer.micrometer.registry.prometheus)
    // Temporarily disable OpenTelemetry auto-configuration as it pulls in
    // incompatible runtime dependencies and prevents the application from
    // starting. Metrics are still exposed via Micrometer Prometheus registry.
    // TODO: re-enable tracing once the collector setup is ready.
    // implementation(libs.io.opentelemetry.opentelemetry.api)
    // runtimeOnly(libs.io.opentelemetry.opentelemetry.exporter.otlp)
    // runtimeOnly(libs.io.opentelemetry.instrumentation.opentelemetry.spring.boot.autoconfigure)
    implementation(libs.org.apache.poi.poi.ooxml)
    implementation(libs.org.mapstruct.mapstruct)
    annotationProcessor(libs.org.mapstruct.mapstruct.processor)
    testAnnotationProcessor(libs.org.mapstruct.mapstruct.processor)
    implementation(libs.org.springdoc.springdoc.openapi.starter.webmvc.ui)
    testImplementation(libs.com.h2database.h2)
    testImplementation(libs.org.springframework.boot.spring.boot.starter.test)
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
description = "schedule-tracker"
java.sourceCompatibility = JavaVersion.VERSION_21


tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

spotless {
    java {
        googleJavaFormat()
        target("src/*/java/**/*.java")
    }
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.named("check") {
    dependsOn(tasks.jacocoTestReport)
}
