# This file was generated by the Gradle 'init' task.
# https://docs.gradle.org/current/userguide/platforms.html#sub::toml-dependencies-format

[versions]
com-h2database-h2 = "2.3.232"
org-flywaydb-flyway-core = "11.9.1"
org-flywaydb-flyway-database-postgresql = "11.9.1"
org-postgresql-postgresql = "42.7.6"
org-springdoc-springdoc-openapi-starter-webmvc-ui = "2.8.6"
org-springframework-boot-spring-boot-starter-data-jpa = "3.5.0"
org-springframework-boot-spring-boot-starter-jdbc = "3.5.0"
org-springframework-boot-spring-boot-starter-test = "3.5.0"
org-springframework-boot-spring-boot-starter-thymeleaf = "3.5.0"
org-springframework-boot-spring-boot-starter-validation = "3.5.0"
org-springframework-boot-spring-boot-starter-web = "3.5.0"
org-springframework-boot-spring-boot-starter-quartz = "3.5.0"
org-springframework-boot-spring-boot-starter-mail = "3.5.0"
mapstruct = "1.6.0"
apache-poi = "5.2.5"
org-springframework-boot-spring-boot-starter-actuator = "3.5.0"
io-micrometer-micrometer-registry-prometheus = "1.15.0"
# OpenTelemetry libraries are temporarily disabled to simplify runtime
# configuration and avoid classpath conflicts. Re-enable once tracing
# infrastructure is deployed.
# io-opentelemetry-opentelemetry-api = "1.51.0"
# io-opentelemetry-opentelemetry-exporter-otlp = "1.51.0"
# io-opentelemetry-instrumentation-opentelemetry-spring-boot-autoconfigure = "2.16.0"

[libraries]
com-h2database-h2 = { module = "com.h2database:h2", version.ref = "com-h2database-h2" }
org-flywaydb-flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "org-flywaydb-flyway-core" }
org-flywaydb-flyway-database-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "org-flywaydb-flyway-database-postgresql" }
org-postgresql-postgresql = { module = "org.postgresql:postgresql", version.ref = "org-postgresql-postgresql" }
org-springdoc-springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "org-springdoc-springdoc-openapi-starter-webmvc-ui" }
org-springframework-boot-spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "org-springframework-boot-spring-boot-starter-data-jpa" }
org-springframework-boot-spring-boot-starter-jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc", version.ref = "org-springframework-boot-spring-boot-starter-jdbc" }
org-springframework-boot-spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "org-springframework-boot-spring-boot-starter-test" }
org-springframework-boot-spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf", version.ref = "org-springframework-boot-spring-boot-starter-thymeleaf" }
org-springframework-boot-spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "org-springframework-boot-spring-boot-starter-validation" }
org-springframework-boot-spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "org-springframework-boot-spring-boot-starter-web" }
org-mapstruct-mapstruct = { module = "org.mapstruct:mapstruct", version.ref = "mapstruct" }
org-mapstruct-mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version.ref = "mapstruct" }
org-springframework-boot-spring-boot-starter-quartz = { module = "org.springframework.boot:spring-boot-starter-quartz", version.ref = "org-springframework-boot-spring-boot-starter-quartz" }
org-springframework-boot-spring-boot-starter-mail = { module = "org.springframework.boot:spring-boot-starter-mail", version.ref = "org-springframework-boot-spring-boot-starter-mail" }
org-apache-poi-poi-ooxml = { module = "org.apache.poi:poi-ooxml", version.ref = "apache-poi" }
org-springframework-boot-spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "org-springframework-boot-spring-boot-starter-actuator" }
io-micrometer-micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "io-micrometer-micrometer-registry-prometheus" }
# io-opentelemetry-opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "io-opentelemetry-opentelemetry-api" }
# io-opentelemetry-opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "io-opentelemetry-opentelemetry-exporter-otlp" }
# io-opentelemetry-instrumentation-opentelemetry-spring-boot-autoconfigure = { module = "io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure", version.ref = "io-opentelemetry-instrumentation-opentelemetry-spring-boot-autoconfigure" }
