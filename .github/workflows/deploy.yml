name: Build and Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PROXY_HOST: ${{ secrets.PROXY_HOST }}
      PROXY_PORT: ${{ secrets.PROXY_PORT }}

    steps:
      - name: Configure proxy variables
        run: |
          # Detect proxy settings either from provided secrets or existing
          # environment variables. GitHub runners might expose the proxy
          # variables in lowercase, so handle both cases.
          if [ -z "$PROXY_HOST" ] || [ -z "$PROXY_PORT" ]; then
            proxy_var="${HTTP_PROXY:-${http_proxy:-}}"
            if [ -n "$proxy_var" ]; then
              PROXY_HOST=$(printf %s "$proxy_var" | cut -d/ -f3 | cut -d: -f1)
              PROXY_PORT=$(printf %s "$proxy_var" | cut -d: -f3)
            else
              echo "::error::PROXY_HOST or PROXY_PORT is not configured" >&2
              exit 1
            fi
          fi
          echo "HTTP_PROXY=http://$PROXY_HOST:$PROXY_PORT" >> "$GITHUB_ENV"
          echo "HTTPS_PROXY=http://$PROXY_HOST:$PROXY_PORT" >> "$GITHUB_ENV"
          echo "PROXY_HOST=$PROXY_HOST" >> "$GITHUB_ENV"
          echo "PROXY_PORT=$PROXY_PORT" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Configure git proxy
        run: |
          git config --global http.proxy $HTTP_PROXY
          git config --global https.proxy $HTTPS_PROXY

      - name: Generate Maven settings
        run: |
          envsubst < .mvn/settings.xml.in > .mvn/settings.xml

      - name: Build with Maven
        env:
          MAVEN_OPTS: "-Dhttp.proxyHost=$PROXY_HOST -Dhttp.proxyPort=$PROXY_PORT -Dhttps.proxyHost=$PROXY_HOST -Dhttps.proxyPort=$PROXY_PORT"
        run: ./mvnw -s .mvn/settings.xml clean package -DskipTests

      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

      - name: Add VPS to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 95.164.2.48 >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
        run: |
          scp -i key.pem target/scheduletracker-0.0.1-SNAPSHOT.jar Dockerfile root@95.164.2.48:/proj/
          ssh -i key.pem root@95.164.2.48 << 'EOF'
            docker network inspect app-network >/dev/null 2>&1 || \
              docker network create app-network
            docker stop my-java-app || true
            docker rm my-java-app  || true
            docker build -t my-java-app /proj/
            docker run -d -p 8080:8080 --network app-network \
              -e SPRING_PROFILES_ACTIVE=postgres \
              -e DB_HOST=${DB_HOST:-schedule-db} --name my-java-app my-java-app
          EOF
