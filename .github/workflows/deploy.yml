# Requires secrets:
#   VPS_HOST, VPS_USER, VPS_PASSWORD
#   (optional) VPS_PORT – если SSH-порт не 22

name: Deploy to VPS

"on":
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ["21", "22-ea"]
        node: ["20", "22"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Temurin JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install root dependencies
        run: npm ci

      - name: Build Tailwind CSS
        run: npm run build

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Fix ESLint issues
        run: npm run lint:fix
        working-directory: frontend

      - name: Run ESLint
        run: npm run lint
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Setup proxy
        run: scripts/setup-proxy.sh
        env:
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}

      - name: Build frontend
        run: cd frontend && npm ci && npm run build

      - name: Copy dist to nginx
        run: |
          rm -rf infra/nginx/www
          mkdir -p infra/nginx/www
          cp -r frontend/dist/* infra/nginx/www/

      - name: Build backend with tests
        run: ./gradlew build
        working-directory: backend

  build-and-deploy:
    needs: build-matrix
    runs-on: ubuntu-latest
    env:
      # Store files in the user's home directory
      DEPLOY_DIR: myapp

    steps:
    # 1. Клонируем репозиторий
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Устанавливаем Temurin JDK 21
    - name: Setup Temurin JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21

    # Install Node for frontend build
    - name: Setup Node 20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    # Install root dependencies and build Tailwind CSS
    - name: Install root dependencies
      run: npm ci

    - name: Build Tailwind CSS
      run: npm run build

    # Install frontend dependencies and build SPA
    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Fix ESLint issues
      run: npm run lint:fix
      working-directory: frontend

    - name: Run ESLint
      run: npm run lint
      working-directory: frontend

    - name: Build frontend
      run: npm run build
      working-directory: frontend

    # 3. Настраиваем прокси для Maven и Git
    - name: Setup proxy
      run: scripts/setup-proxy.sh
      env:
        PROXY_HOST: ${{ secrets.PROXY_HOST }}
        PROXY_PORT: ${{ secrets.PROXY_PORT }}

    - name: Build frontend
      run: cd frontend && npm ci && npm run build

    - name: Copy dist to nginx
      run: |
        rm -rf infra/nginx/www
        mkdir -p infra/nginx/www
        cp -r frontend/dist/* infra/nginx/www/

    # 4. Запускаем тесты и собираем JAR
    - name: Build backend with tests
      run: ./gradlew build
      working-directory: backend

    # Restore TLS certificate files from secrets
    - name: Write TLS certificates
      run: |
        mkdir -p infra/nginx/certs

        write_secret_file() {
          local name=$1 content=$2
          mkdir -p infra/nginx/certs
          if [[ $content == -----BEGIN* ]]; then
            printf '%s\n' "$content" > "infra/nginx/certs/$name"
          else
            printf '%s' "$content" | base64 -d > "infra/nginx/certs/$name"
            ( tail -c1 "infra/nginx/certs/$name" | read -r _ ) || echo >> "infra/nginx/certs/$name"
          fi
        }

        write_secret_file crm-synergy.crt "${{ secrets.SSL_CERT }}"
        write_secret_file crm-synergy_ca.crt "${{ secrets.SSL_CA_CERT }}"
        write_secret_file crm-synergy.key "${{ secrets.SSL_KEY }}"
        if [ -n "${{ secrets.SSL_CA_CERT }}" ]; then
          write_secret_file crm-synergy_ca.crt "${{ secrets.SSL_CA_CERT }}"
        fi

        chmod 600 infra/nginx/certs/crm-synergy.key

        # verify the key to catch invalid input early
        openssl pkey -in infra/nginx/certs/crm-synergy.key -noout >/dev/null

        if [ -f infra/nginx/certs/crm-synergy_ca.crt ]; then
          {
            cat infra/nginx/certs/crm-synergy.crt
            printf '\n'
            cat infra/nginx/certs/crm-synergy_ca.crt
          } > infra/nginx/certs/fullchain.pem
        else
          cp infra/nginx/certs/crm-synergy.crt infra/nginx/certs/fullchain.pem
        fi

        openssl x509 -noout -in infra/nginx/certs/fullchain.pem
        if [ -f infra/nginx/certs/crm-synergy_ca.crt ]; then
          openssl verify -CAfile infra/nginx/certs/crm-synergy_ca.crt \
                         infra/nginx/certs/crm-synergy.crt
        fi
      shell: bash

    # Render environment-specific nginx.conf
    - name: Render NGINX config
      run: |
        APP_HOST=app APP_PORT=8080 SERVER_NAME=crm-synergy.ru ./scripts/render-nginx.sh

    # Validate NGINX configuration syntax
    - name: Validate NGINX config
      run: |
        docker run --rm \
          --add-host app:127.0.0.1 \
          -v ${{ github.workspace }}/infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
          -v ${{ github.workspace }}/infra/nginx/certs:/etc/nginx/certs:ro \
          nginx:1.26 nginx -t -c /etc/nginx/nginx.conf

    # 5. Копируем Dockerfile и docker-compose.yml на VPS (в каталог $HOME/myapp)
    - name: Copy infra files to VPS
      if: ${{ hashFiles('backend/Dockerfile', 'infra/docker-compose.yml', 'infra/nginx/nginx.conf', 'infra/nginx/nginx.conf.template') != '' }}
      uses: appleboy/scp-action@v0.1.4
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # 🛑 Если ваш SSH-порт – не 22, раскомментируйте строку ниже:
        # port:     ${{ secrets.VPS_PORT }}
        # Передаём на сервер не только Dockerfile и compose, но и исходники
        # бэкенда, чтобы Docker смог собрать jar внутри контейнера
        source: "backend,infra/docker-compose.yml,scripts/wait-for-db.sh,infra/nginx/nginx.conf,infra/prometheus/prometheus.yml"
        target: ${{ env.DEPLOY_DIR }}
        rm:     true

    # 5.5. Убеждаемся, что каталог существует (на случай пропуска предыдущего шага)
    - name: Ensure target directory
      uses: appleboy/ssh-action@v1.0.0
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # port:     ${{ secrets.VPS_PORT }}
        envs: DEPLOY_DIR
        script: |
          mkdir -p "$HOME/$DEPLOY_DIR"

    - name: Upload infra/.env
      if: ${{ hashFiles('infra/.env') != '' }}
      uses: appleboy/scp-action@v0.1.4
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        target: ${{ env.DEPLOY_DIR }}/infra
        source: infra/.env

    - name: Create environment file from secrets
      if: ${{ hashFiles('infra/.env') == '' }}
      uses: appleboy/ssh-action@v1.0.0
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        SMTP_HOST: ${{ secrets.SMTP_HOST }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        SMTP_AUTH: ${{ secrets.SMTP_AUTH }}
        SMTP_STARTTLS: ${{ secrets.SMTP_STARTTLS }}
        MAIL_FROM: ${{ secrets.MAIL_FROM }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NGINX_HTTP_PORT: 80
        NGINX_HTTPS_PORT: 443
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # port:     ${{ secrets.VPS_PORT }}
        envs: DEPLOY_DIR,DB_HOST,DB_PORT,DB_USER,DB_PASSWORD,DB_NAME,SMTP_HOST,SMTP_PORT,SMTP_USERNAME,SMTP_PASSWORD,SMTP_AUTH,SMTP_STARTTLS,MAIL_FROM,TELEGRAM_BOT_TOKEN,JWT_SECRET,NGINX_HTTP_PORT,NGINX_HTTPS_PORT
        script: |
          mkdir -p "$HOME/$DEPLOY_DIR/infra"
          cat > "$HOME/$DEPLOY_DIR/infra/.env" <<EOF
          DB_HOST=$DB_HOST
          DB_PORT=$DB_PORT
          DB_USER=$DB_USER
          DB_PASSWORD=$DB_PASSWORD
          DB_NAME=$DB_NAME
          SMTP_HOST=$SMTP_HOST
          SMTP_PORT=$SMTP_PORT
          SMTP_USERNAME=$SMTP_USERNAME
          SMTP_PASSWORD=$SMTP_PASSWORD
          SMTP_AUTH=$SMTP_AUTH
          SMTP_STARTTLS=$SMTP_STARTTLS
          MAIL_FROM=$MAIL_FROM
          TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN
          JWT_SECRET=$JWT_SECRET
          NGINX_HTTP_PORT=$NGINX_HTTP_PORT
          NGINX_HTTPS_PORT=$NGINX_HTTPS_PORT
          EOF


    # 7. Собираем Docker-образ и перезапускаем контейнер через SSH
    - name: Docker Compose up
      uses: appleboy/ssh-action@v1.0.0
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # port:     ${{ secrets.VPS_PORT }}
        envs: DEPLOY_DIR
        script: |
          set -e
          cd "$HOME/$DEPLOY_DIR"
          # remove old containers from the schedule-app Compose project
          docker ps -aq --filter "label=com.docker.compose.project=schedule-app" | xargs -r docker rm -f
          # remove dangling images, unused volumes and other artifacts to free disk space
          docker system prune -af
          docker compose -f infra/docker-compose.yml down --remove-orphans
          docker compose -f infra/docker-compose.yml build --no-cache
          docker compose -f infra/docker-compose.yml up -d --wait
          docker compose -f infra/docker-compose.yml ps
          docker compose -f infra/docker-compose.yml logs app --tail=20
