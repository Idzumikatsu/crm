# Requires secrets:
#   VPS_HOST, VPS_USER, VPS_PASSWORD, TLS_DOMAIN, TLS_EMAIL
#   (optional) VPS_PORT ‚Äì –µ—Å–ª–∏ SSH-–ø–æ—Ä—Ç –Ω–µ 22

name: Deploy to VPS

"on":
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ["21", "22-ea"]
        node: ["20", "22"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Temurin JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install root dependencies
        run: npm ci

      - name: Build Tailwind CSS
        run: npm run build

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Fix ESLint issues
        run: npm run lint:fix
        working-directory: frontend

      - name: Run ESLint
        run: npm run lint
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Setup proxy
        run: scripts/setup-proxy.sh
        env:
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}

      - name: Build backend with tests
        run: ./gradlew build
        working-directory: backend

  build-and-deploy:
    needs: build-matrix
    runs-on: ubuntu-latest
    env:
      # Store files in the user's home directory
      DEPLOY_DIR: myapp

    steps:
    # 1. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Temurin JDK 21
    - name: Setup Temurin JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21

    # Install Node for frontend build
    - name: Setup Node 20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    # Install root dependencies and build Tailwind CSS
    - name: Install root dependencies
      run: npm ci

    - name: Build Tailwind CSS
      run: npm run build

    # Install frontend dependencies and build SPA
    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Fix ESLint issues
      run: npm run lint:fix
      working-directory: frontend

    - name: Run ESLint
      run: npm run lint
      working-directory: frontend

    - name: Build frontend
      run: npm run build
      working-directory: frontend

    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Maven –∏ Git
    - name: Setup proxy
      run: scripts/setup-proxy.sh
      env:
        PROXY_HOST: ${{ secrets.PROXY_HOST }}
        PROXY_PORT: ${{ secrets.PROXY_PORT }}

    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º JAR
    - name: Build backend with tests
      run: ./gradlew build
      working-directory: backend


    # Render environment-specific nginx.conf
    - name: Render NGINX config
      run: |
        APP_HOST=app APP_PORT=8080 ./scripts/render-nginx.sh

    # 5. –ö–æ–ø–∏—Ä—É–µ–º Dockerfile –∏ docker-compose.yml –Ω–∞ VPS (–≤ –∫–∞—Ç–∞–ª–æ–≥ $HOME/myapp)
    - name: Copy infra files to VPS
      if: ${{ hashFiles('backend/Dockerfile', 'infra/docker-compose.yml', 'infra/nginx/nginx.conf', 'infra/nginx/nginx.conf.template', 'infra/.env.example') != '' }}
      uses: appleboy/scp-action@v0.1.4
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # üõë –ï—Å–ª–∏ –≤–∞—à SSH-–ø–æ—Ä—Ç ‚Äì –Ω–µ 22, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ:
        # port:     ${{ secrets.VPS_PORT }}
        # –ü–µ—Ä–µ–¥–∞—ë–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ç–æ–ª—å–∫–æ Dockerfile –∏ compose, –Ω–æ –∏ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
        # –±—ç–∫–µ–Ω–¥–∞, —á—Ç–æ–±—ã Docker —Å–º–æ–≥ —Å–æ–±—Ä–∞—Ç—å jar –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        source: "backend,infra/docker-compose.yml,infra/.env.example,scripts/wait-for-db.sh,scripts/start-dev.sh,infra/nginx/nginx.conf,infra/prometheus/prometheus.yml"
        target: ${{ env.DEPLOY_DIR }}
        rm:     true

    # 5.5. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞)
    - name: Ensure target directory
      uses: appleboy/ssh-action@v1.0.0
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # port:     ${{ secrets.VPS_PORT }}
        envs: DEPLOY_DIR
        script: |
          mkdir -p "$HOME/$DEPLOY_DIR"

    # Create .env from example if not present
    - name: Prepare environment file
      uses: appleboy/ssh-action@v1.0.0
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # port:     ${{ secrets.VPS_PORT }}
        envs: DEPLOY_DIR
        script: |
          if [ -d "$HOME/$DEPLOY_DIR/infra" ]; then
            cd "$HOME/$DEPLOY_DIR/infra"
            if [ ! -f .env ] && [ -f .env.example ]; then
              cp .env.example .env
            fi
          fi

    # Obtain TLS certificate via Let's Encrypt
    - name: Obtain Let's Encrypt certificate
      uses: appleboy/ssh-action@v1.0.0
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # port:     ${{ secrets.VPS_PORT }}
        envs: DEPLOY_DIR,TLS_DOMAIN,TLS_EMAIL
        script: |
          CERT_DIR="$HOME/letsencrypt"
          mkdir -p "$CERT_DIR"
          docker run --rm \
            -v "$CERT_DIR:/etc/letsencrypt" \
            -p 80:80 -p 443:443 \
            certbot/certbot certonly --standalone \
              --non-interactive --agree-tos \
              -m "$TLS_EMAIL" -d "$TLS_DOMAIN"
          mkdir -p "$HOME/$DEPLOY_DIR/infra/nginx/certs"
          cp "$CERT_DIR/live/$TLS_DOMAIN/fullchain.pem" "$HOME/$DEPLOY_DIR/infra/nginx/certs/server.crt"
          cp "$CERT_DIR/live/$TLS_DOMAIN/privkey.pem" "$HOME/$DEPLOY_DIR/infra/nginx/certs/server.key"


    # 7. –°–æ–±–∏—Ä–∞–µ–º Docker-–æ–±—Ä–∞–∑ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ SSH
    - name: Docker Compose up
      uses: appleboy/ssh-action@v1.0.0
      with:
        host:       ${{ secrets.VPS_HOST }}
        username:   ${{ secrets.VPS_USER }}
        password:   ${{ secrets.VPS_PASSWORD }}
        # port:     ${{ secrets.VPS_PORT }}
        envs: DEPLOY_DIR
        script: |
          set -e
          cd "$HOME/$DEPLOY_DIR"
          # remove old containers from the schedule-app Compose project
          docker ps -aq --filter "label=com.docker.compose.project=schedule-app" | xargs -r docker rm -f
          # remove dangling images, unused volumes and other artifacts to free disk space
          docker system prune -af
          docker compose -f infra/docker-compose.yml down --remove-orphans
          docker compose -f infra/docker-compose.yml build --no-cache
          docker compose -f infra/docker-compose.yml up -d --wait
          docker compose -f infra/docker-compose.yml ps
          docker compose -f infra/docker-compose.yml logs app --tail=20
