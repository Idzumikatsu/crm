name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up runtimes
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Build frontend
      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Lint frontend
        run: npm run lint
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend



      # 3.1 Copy built frontend into backend static resources (опционально)
      - name: Copy frontend build into backend static
        run: |
          mkdir -p backend/src/main/resources/static
          rm -rf backend/src/main/resources/static/*
          cp -r frontend/dist/* backend/src/main/resources/static/

      # 4. Build & test backend
      - name: Run backend tests
        run: ./gradlew test
        working-directory: backend

      - name: Build backend JAR
        run: ./gradlew bootJar
        working-directory: backend

      # 5. Archive artifact (optional)
      - name: Archive backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: schedule-app-jar
          path: backend/build/libs/*.jar

      # 6. Deploy to VPS: cleanup & check Java
      - name: Clean old app on VPS & check Java
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            sudo rm -rf /opt/schedule-app/*
            if ! java -version 2>&1 | grep '21'; then
              echo 'ERROR: Java 21 not found on VPS'
              exit 1
            fi

      # 7. Copy new JAR
      - name: Deploy JAR to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "backend/build/libs/*.jar"
          target: "/opt/schedule-app"
          strip_components: 3
          overwrite: true

      # 7.1 Rename to app.jar
      - name: Rename JAR to app.jar on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            sudo mv /opt/schedule-app/*.jar /opt/schedule-app/app.jar
            sudo chown root:root /opt/schedule-app/app.jar
            sudo chmod 644 /opt/schedule-app/app.jar

      # 8. Upload systemd unit
      - name: Upload systemd unit
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "infra/systemd/schedule-app.service"
          target: "/etc/systemd/system"
          strip_components: 2
          overwrite: true

      # 9. Upload Nginx config
      - name: Upload Nginx config
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "infra/nginx/crm-synergy.conf"
          target: "/etc/nginx/sites-available"
          strip_components: 2
          overwrite: true

      # 9.1 Ensure frontend directory exists on VPS
      - name: Prepare frontend directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            sudo mkdir -p /opt/schedule-app/frontend
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} /opt/schedule-app

      # 10. Deploy static frontend files
      - name: Deploy frontend to VPS
        run: |
          echo "${{ secrets.VPS_SSH_KEY }}" > private_key
          chmod 600 private_key
          ssh-keygen -p -P "${{ secrets.VPS_PASSPHRASE }}" -N "" -f private_key >/dev/null
          rsync -avz --delete -e "ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.VPS_SSH_PORT }}" frontend/dist/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/schedule-app/frontend/
          rm -f private_key

      # 11. Enable site and reload Nginx
      - name: Reload Nginx
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            sudo ln -sf /etc/nginx/sites-available/crm-synergy.conf /etc/nginx/sites-enabled/crm-synergy.conf
            sudo nginx -t
            sudo systemctl reload nginx

      # 12. Configure environment variables on VPS
      - name: Configure environment file on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            sudo tee /etc/schedule-app.env > /dev/null <<EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            # …другие переменные…
            EOF
            sudo chown root:root /etc/schedule-app.env
            sudo chmod 640 /etc/schedule-app.env

      # 13. Restart the service
      - name: Restart schedule-app service
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            sudo systemctl daemon-reload
            sudo systemctl enable schedule-app
            sudo systemctl restart schedule-app

      # 14. Verify SPA files and endpoint
      - name: Smoke test deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            test -f /opt/schedule-app/frontend/index.html
            sudo systemctl is-active --quiet schedule-app

      - name: Check public endpoints
        run: |
          curl -L -I --max-time 10 https://crm-synergy.ru/ | grep -E "200|301|302" || true
          curl -L -I --max-time 10 https://crm-synergy.ru/assets/ | grep -E "200|301|302" || true
